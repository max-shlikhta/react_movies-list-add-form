{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","templates/templates.ts","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","template","NewMovie","React","memo","onAdd","useState","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","isCorrectUrl","url","test","errors","trim","length","isTitleError","setIsTitleError","isImgUrlError","setIsImgUrlError","isImdbUrlError","setIsImdbUrlError","isImdbIdError","setIsImdbIdError","resetAll","onSubmit","event","preventDefault","htmlFor","classNames","id","type","placeholder","value","onChange","target","onBlur","required","onClick","App","moviesFromServer","setMovies","addMovie","useCallback","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9c35f5f0.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","export const template = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport './NewMovie.scss';\nimport { template } from '../../templates/templates';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\nexport const NewMovie: React.FC<Props> = React.memo(({ onAdd }) => {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const resetInputs = () => {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n  };\n\n  const isCorrectUrl = (url: string) => template.test(url);\n\n  const errors = {\n    title: title.trim().length === 0,\n    imgUrl: !isCorrectUrl(imgUrl),\n    imdbUrl: !isCorrectUrl(imdbUrl),\n    imdbId: imdbId.trim().length === 0,\n  };\n\n  const [isTitleError, setIsTitleError] = useState(false);\n  const [isImgUrlError, setIsImgUrlError] = useState(false);\n  const [isImdbUrlError, setIsImdbUrlError] = useState(false);\n  const [isImdbIdError, setIsImdbIdError] = useState(false);\n\n  const resetErrors = () => {\n    setIsTitleError(false);\n    setIsImgUrlError(false);\n    setIsImdbUrlError(false);\n    setIsImdbIdError(false);\n  };\n\n  const resetAll = () => {\n    resetErrors();\n    resetInputs();\n  };\n\n  const submitHandler = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    onAdd({\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    });\n\n    resetAll();\n  };\n\n  return (\n    <form\n      className=\"form\"\n      onSubmit={submitHandler}\n    >\n      <label htmlFor=\"title\" className=\"form__label\">\n        <input\n          className={classNames(\n            'form__input',\n            { 'form__input--error': isTitleError && errors.title },\n          )}\n          id=\"title\"\n          type=\"text\"\n          placeholder=\"Title\"\n          value={title}\n          onChange={(event) => setTitle(event.target.value)}\n          onBlur={() => setIsTitleError(true)}\n          required\n        />\n\n        <div\n          className={classNames(\n            'form__error-text',\n            { 'form__error-text--hidden': !isTitleError || !errors.title },\n          )}\n        >\n          Please enter a title\n        </div>\n      </label>\n\n      <label htmlFor=\"description\" className=\"form__label\">\n        <textarea\n          className=\"form__input\"\n          id=\"description\"\n          placeholder=\"Description\"\n          value={description}\n          onChange={(event) => setDescription(event.target.value)}\n        />\n      </label>\n\n      <label\n        htmlFor=\"imgUrl\"\n        className=\"form__label\"\n      >\n        <input\n          className={classNames(\n            'form__input',\n            { 'form__input--error': isImgUrlError && errors.imgUrl },\n          )}\n          id=\"imgUrl\"\n          type=\"text\"\n          placeholder=\"Image URL\"\n          value={imgUrl}\n          onChange={(event) => setImgUrl(event.target.value)}\n          onBlur={() => setIsImgUrlError(true)}\n          required\n        />\n\n        <div\n          className={classNames(\n            'form__error-text',\n            { 'form__error-text--hidden': !isImgUrlError || !errors.imgUrl },\n          )}\n        >\n          Please enter image URL in correct format\n        </div>\n      </label>\n\n      <label\n        className=\"form__label\"\n        htmlFor=\"imdbUrl\"\n      >\n        <input\n          className={classNames(\n            'form__input',\n            { 'form__input--error': isImdbUrlError && errors.imdbUrl },\n          )}\n          id=\"imdbUrl\"\n          type=\"text\"\n          placeholder=\"IMDB URL\"\n          value={imdbUrl}\n          onChange={event => setImdbUrl(event.target.value)}\n          onBlur={() => setIsImdbUrlError(true)}\n          required\n        />\n\n        <div\n          className={classNames(\n            'form__error-text',\n            { 'form__error-text--hidden': !isImdbUrlError || !errors.imdbUrl },\n          )}\n        >\n          Please enter IMDB URL in correct format\n        </div>\n      </label>\n\n      <label\n        className=\"form__label\"\n        htmlFor=\"imdbId\"\n      >\n        <input\n          className={classNames(\n            'form__input',\n            { 'form__input--error': isImdbIdError && errors.imdbId },\n          )}\n          id=\"imdbId\"\n          type=\"text\"\n          placeholder=\"IMDB Id\"\n          value={imdbId}\n          onChange={(event) => setImdbId(event.target.value)}\n          onBlur={() => setIsImdbIdError(true)}\n          required\n        />\n\n        <div\n          className={classNames(\n            'form__error-text',\n            { 'form__error-text--hidden': !isImdbIdError || !errors.imdbId },\n          )}\n        >\n          Please enter IMDB Id\n        </div>\n      </label>\n\n      <button\n        className=\"form__button\"\n        type=\"submit\"\n      >\n        Add\n      </button>\n\n      <button\n        className=\"form__button form__button--reset\"\n        type=\"button\"\n        onClick={resetAll}\n      >\n        Reset\n      </button>\n    </form>\n  );\n});\n","import React, { useState, useCallback } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App: React.FC = React.memo(() => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = useCallback((movie: Movie) => {\n    setMovies(prevMovies => [...prevMovies, movie]);\n  }, []);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <NewMovie\n          onAdd={addMovie}\n        />\n      </div>\n    </div>\n  );\n});\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}